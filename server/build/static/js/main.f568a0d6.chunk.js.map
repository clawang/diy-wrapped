{"version":3,"sources":["gradient2.jpg","spotify1.JPG","spotify2.JPG","spotify3.JPG","PlaylistPage.js","CanvasGraphic.js","App.js","serviceWorker.js","index.js","gradient1.jpg","gradient3.jpg","gradient4.jpg","gradient5.png"],"names":["module","exports","PlaylistPage","CanvasGraphic","props","useState","palette","setAppState","shortenString","text","remove","index","indexOf","substring","length","concat","drawStoryCanvas","a","ratio","window","devicePixelRatio","console","log","cv","document","getElementById","width","height","ctx","getContext","scale","drawImage","gradient4","startingHeight","artists","blue","purple","orange","fillStyle","fillRect","gradient3","images","url","font","fillText","i","Object","keys","name","metrics","measureText","toRemove","Math","ceil","writeText","tracks","genres","g","topGenre","charAt","toUpperCase","slice","textAlign","footerHeight","drawArtistsCanvas","c","yellow","pink","gradient5","startX","drawSongsCanvas","darkOrange","gradient1","album","words","x","y","src","Promise","resolve","reject","image","Image","crossOrigin","onload","useEffect","finished","Vibrant","from","getPalette","err","getColor","className","onClick","dt","toDataURL","replace","link","createElement","download","href","click","id","App","loggedIn","token","query","setQuery","spotifyApi","SpotifyWebApi","e","hashParams","r","q","location","hash","exec","decodeURIComponent","getHashParams","access_token","setAccessToken","type","value","onChange","evt","target","preventDefault","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f568a0d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gradient2.f4d46500.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spotify1.c7677681.JPG\";","module.exports = __webpack_public_path__ + \"static/media/spotify2.0814b338.JPG\";","module.exports = __webpack_public_path__ + \"static/media/spotify3.a63b63cb.JPG\";","import React, {useEffect, useState} from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Playlist from './Playlist';\nimport {sortGenres, propToArr} from './analyzeData';\n\nfunction PlaylistPage(props) {\n  const [appState, setAppState] = useState({\n    playlists: [{}],\n    genres: {}\n  });\n  const [loading, setLoading] = useState(true);\n\n  const spotifyApi = new SpotifyWebApi();\n  spotifyApi.setAccessToken(props.token);\n\n  const getPlaylists = () => {\n    spotifyApi.getUserPlaylists()\n      .then((response) => {\n        //console.log(response.items);\n        setAppState({playlists: response.items, genres: appState.genres});\n      })\n  }\n\n  useEffect(() => {\n    getPlaylists();\n  }, [setAppState]);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [appState.playlists]);\n\n  const setGenres = (obj) => {\n    let newObj = sortGenres(obj);\n    setAppState({playlists: appState.playlists, genres: newObj});\n  }\n\n  const strGenres = (genres) => {\n    if(Object.keys(genres).length > 0) {\n      let arr = [];\n      let g = propToArr(genres, 5).map(genre => <div className=\"genre-level\"><p>{genre}</p></div>);\n      arr[0] = g[4];\n      arr[1] = g[3];\n      arr[2] = g[1];\n      arr[3] = g[0];\n      arr[4] = g[2];\n      return arr;\n    } else {\n      return <p>N/A</p>;\n    }\n  }\n\n\n  return (\n    <div className=\"genres-wrapper\">\n      {/*<div className=\"genres\">\n        <h2>Your Top Genres:</h2>\n        <div className=\"genre-level-wrapper\">\n          {strGenres(appState.genres)}\n        </div>\n      </div>*/}\n      <div className=\"playlist-wrapper\">\n        {!loading ? appState.playlists.map((pl) => {\n            return <Playlist pl={pl} allGenres={appState.genres} setGenres={setGenres} />;\n          }) \n        :\n        <div></div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default PlaylistPage;\n","import React, {useEffect, useState} from 'react';\nimport Vibrant from 'node-vibrant';\nimport gradient1 from './gradient1.jpg';\nimport gradient2 from './gradient2.jpg';\nimport gradient3 from './gradient3.jpg';\nimport gradient4 from './gradient4.jpg';\nimport gradient5 from './gradient5.png';\nimport spotify1 from './spotify1.JPG';\nimport spotify2 from './spotify2.JPG';\nimport spotify3 from './spotify3.JPG';\n\nfunction CanvasGraphic(props) {\n  const [appState, setAppState] = useState({\n    palette: {}\n  });\n\n  const shortenString = (text, remove) => {\n  \tlet index = text.indexOf('(');\n  \tif(index > 0) return text.substring(0, index);\n\t\treturn text.substring(0, text.length-remove).concat('..');\n\t}\n\n  const getColor = () => {\n  \tlet src = '';\n  \tif(props.tracks) {\n\t\tsrc = props.artists[0].images[0].url || '';\n\t}\n  \tVibrant.from(src).getPalette(function(err, palette) {\n\t\tif(palette) {\n\t\t\tsetAppState({palette: palette});\n\t\t\t//drawSquareCanvas(palette);\n\t\t\tdrawSongsCanvas();\n\t\t\tdrawStoryCanvas();\n\t\t\tdrawArtistsCanvas();\n\t\t}\n\t});\n  }\n\n  const drawStoryCanvas = async () => {\n  \tlet ratio = window.devicePixelRatio;\n  \tconsole.log(ratio);\n  \tconst w = 450;\n  \tconst h = 800;\n  \tconst cv = document.getElementById(\"story\");\n  \tcv.width = w * ratio;\n    cv.height = h * ratio;\n    // cv.style.width = w + \"px\";\n    // cv.style.height = h + \"px\";\n  \tconst ctx = cv.getContext(\"2d\");\n  \tctx.scale(ratio, ratio);\n\n  \t//ctx.fillStyle = 'rgb(0,0,0)';\n  \t//ctx.fillRect(0, 0, c.width, c.height);\n  \tawait drawImage(ctx, gradient4, 0, 0, cv.width, cv.height);\n  \tconst startingHeight = 120;\n  \tconsole.log(props.artists);\n\n  \tconst blue = 'rgb(0,0,0)';\n  \tconst purple = 'rgb(177,197,252)';\n  \tconst orange = 'rgb(247,210,201)';\n\n  \tctx.fillStyle = blue;\n  \tctx.fillRect(50, 75, 350, 650);\n  \tawait drawImage(ctx, gradient3, 75, startingHeight + 25, 300, 200);\n  \tawait drawImage(ctx, props.artists[0].images[1].url, 100, startingHeight, 250, 250);\n\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.font = \"16px 'Circular'\";\n  \tctx.fillText('TOP ARTISTS', 70, startingHeight + 300);\n  \tctx.font = \"14px 'Circular'\";\n  \tfor(let i = 0; i < 5; i++) {\n  \t\tif(props.artists[i] && Object.keys(props.artists[i]).length != 0) {\n  \t\t\tlet name = props.artists[i].name;\n  \t\t\tlet metrics = ctx.measureText(name);\n  \t\t\tlet width = metrics.width;\n  \t\t\tif(width > 200) {\n  \t\t\t\tlet ratio = width/name.length;\n  \t\t\t\tlet toRemove = Math.ceil((width-200)/ratio);\n  \t\t\t\tname = shortenString(name, toRemove+1);\n  \t\t\t}\n  \t\t\tctx.fillStyle = purple;\n  \t\t\twriteText(ctx, name, 85, startingHeight + 325 + i * 18);\n  \t\t\tctx.fillStyle = 'rgb(255,255,255)';\n  \t\t\twriteText(ctx, i+1, 70, startingHeight + 325 + i * 18);\n  \t\t}\n  \t}\n\n  \tctx.font = \"16px 'Circular'\";\n  \tctx.fillText('TOP SONGS', 230, startingHeight + 300);\n  \tctx.font = \"14px 'Circular'\";\n  \tfor(let i = 0; i < 5; i++) {\n  \t\tif(props.tracks[i]) {\n  \t\t\tlet name = props.tracks[i].name;\n  \t\t\tlet metrics = ctx.measureText(name);\n  \t\t\tlet width = metrics.width;\n  \t\t\tif(width > 100) {\n  \t\t\t\tlet ratio = width/name.length;\n  \t\t\t\tlet toRemove = Math.ceil((width-100)/ratio);\n  \t\t\t\tname = shortenString(name, toRemove+1);\n  \t\t\t}\n  \t\t\tctx.fillStyle = purple;\n  \t\t\twriteText(ctx, name, 245, startingHeight + 325 + i * 18);\n  \t\t\tctx.fillStyle = 'rgb(255,255,255)';\n  \t\t\twriteText(ctx, i+1, 230, startingHeight + 325 + i * 18);\n  \t\t}\n  \t}\n\n\t\tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.font = \"16px 'Circular'\";\n  \tctx.fillText('TOP GENRE', 70, startingHeight + 470);\n  \tctx.fillStyle = purple;\n  \tctx.font = \"32px 'Circular'\";\n  \tif(props.genres && props.genres[0][0]) {\n  \t\tlet g = props.genres[0][0];\n  \t\tlet topGenre = g.charAt(0).toUpperCase() + g.slice(1);\n  \t\twriteText(ctx, topGenre, 70, startingHeight + 510);\n  \t}\n\n  \tconst footerHeight = 50;\n  \tctx.fillStyle = orange;\n  \tctx.fillRect(50, 625 + footerHeight, 350, footerHeight);\n  \tctx.fillStyle = blue;\n  \tctx.font = \"18px 'Circular'\";\n  \tctx.textAlign = 'center';\n  \twriteText(ctx, 'bit.ly/quarantine-wrapped', 225, startingHeight + 550 + footerHeight/2 + 8);\n  }\n\n  const drawArtistsCanvas = async () => {\n  \tlet ratio = window.devicePixelRatio;\n  \tconst w = 450;\n  \tconst h = 800;\n  \tconst c = document.getElementById(\"artists\");\n  \tc.width = w * ratio;\n    c.height = h * ratio;\n  \tconst ctx = c.getContext(\"2d\");\n  \tctx.scale(ratio, ratio);\n\n  \tconst purple = 'rgb(229,187,241)';\n  \tconst yellow = 'rgb(239,210,10)';\n  \tconst pink = 'rgb(226,28,164)';\n\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.fillRect(0, 0, c.width, c.height);\n\n\t  await drawImage(ctx, gradient5, 0, 0, 450, 800);\n\n\t  ctx.fillStyle = pink;\n  \tctx.fillRect(50, 75, 350, 650);\n\n  \tctx.font = \"32px 'Circular'\";\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.textAlign = 'center';\n  \twriteText(ctx, 'My Top Artists', 225, 150);\n\n  \tconst startingHeight = 180;\n  \tconst startX = 85;\n  \tctx.textAlign = 'left';\n  \tfor(let i = 0; i < 5; i++) {\n  \t\tif(props.artists[i]) {\n  \t\t\tconsole.log(props.artists[i]);\n  \t\t\tawait drawImage(ctx, props.artists[i].images[1].url, startX, startingHeight + i * 100, 90, 90);\n  \t\t\tctx.font = \"18px 'Circular'\";\n  \t\t\tctx.fillStyle = yellow;\n  \t\t\twriteText(ctx, \"#\"+(i+1), startX + 105, startingHeight + 35 + i*100);\n  \t\t\tctx.fillStyle = 'rgb(255,255,255)';\n  \t\t\tlet name = props.artists[i].name;\n  \t\t\tlet metrics = ctx.measureText(name);\n  \t\t\tlet width = metrics.width;\n  \t\t\t\n  \t\t\tconst maxWidth = 180;\n  \t\t\tif(width > maxWidth) {\n  \t\t\t\tlet ratio = width/name.length;\n  \t\t\t\tlet toRemove = Math.ceil((width-maxWidth)/ratio);\n  \t\t\t\tname = shortenString(name, toRemove+1);\n  \t\t\t}\n  \t\t\tctx.font = \"22px 'Circular'\";\n  \t\t\twriteText(ctx, name, startX + 105, startingHeight + 65 + i * 100);\n  \t\t}\n  \t}\n  }\n\n  const drawSongsCanvas = async () => {\n  \tlet ratio = window.devicePixelRatio;\n  \tconst w = 450;\n  \tconst h = 800;\n  \tconst c = document.getElementById(\"songs\");\n  \tc.width = w * ratio;\n    c.height = h * ratio;\n    // c.style.width = w + \"px\";\n    // c.style.height = h + \"px\";\n  \tconst ctx = c.getContext(\"2d\");\n  \tctx.scale(ratio, ratio);\n\n  \tconst orange = 'rgb(226,139,5)';\n  \tconst yellow = 'rgb(228,203,46)';\n  \tconst darkOrange = 'rgb(205,38,2)';\n  \tconst blue = 'rgb(0,196,230)';\n\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.fillRect(0, 0, c.width, c.height);\n\n\t  await drawImage(ctx, gradient1, 0, 0, 450, 800);\n\n\t  ctx.fillStyle = yellow;\n  \tctx.fillRect(50, 75, 350, 650);\n\n  \tctx.font = \"32px 'Circular'\";\n  \tctx.fillStyle = 'rgb(0,0,0)';\n  \tctx.textAlign = 'center';\n  \twriteText(ctx, 'My Top Songs', 225, 150);\n\n  \tconst startingHeight = 180;\n  \tconst startX = 85;\n  \tctx.textAlign = 'left';\n  \tfor(let i = 0; i < 5; i++) {\n  \t\tif(props.tracks[i]) {\n  \t\t\tawait drawImage(ctx, props.tracks[i].album.images[1].url, startX, startingHeight + i * 100, 90, 90);\n  \t\t\tctx.font = \"18px 'Circular'\";\n  \t\t\tctx.fillStyle = blue;\n  \t\t\twriteText(ctx, \"#\"+(i+1), startX + 105, startingHeight + 30 + i*100);\n  \t\t\tctx.fillStyle = 'rgb(0,0,0)';\n  \t\t\tlet name = props.tracks[i].name;\n  \t\t\tlet metrics = ctx.measureText(name);\n  \t\t\tlet width = metrics.width;\n  \t\t\t\n  \t\t\tconst maxWidth = 180;\n  \t\t\tif(width > maxWidth) {\n  \t\t\t\tlet ratio = width/name.length;\n  \t\t\t\tlet toRemove = Math.ceil((width-maxWidth)/ratio);\n  \t\t\t\tname = shortenString(name, toRemove+1);\n  \t\t\t}\n  \t\t\twriteText(ctx, name, startX + 105, startingHeight + 52 + i * 100);\n\n  \t\t\tctx.font = \"16px 'Circular'\";\n  \t\t\tctx.fillStyle = darkOrange;\n  \t\t\twriteText(ctx, props.tracks[i].artists[0].name, startX + 105, startingHeight + 75 + i * 100);\n  \t\t}\n  \t}\n  }\n\n  const drawSquareCanvas = (palette) => {\n  \tlet c = document.getElementById(\"downloadable\");\n  \tc.width = c.clientWidth * 2\n  \tc.height = c.clientHeight * 2\n  \tlet ctx = c.getContext(\"2d\");\n  \tif(window.innerWidth < 600) {\n  \t\tctx.scale(1.4, 1.4);\n  \t} else {\n  \t\tctx.scale(2, 2);\n  \t}\n\n  \tif(palette.DarkMuted) {\n  \t\tconst bgColor = palette.DarkMuted.getRgb();\n  \t\tctx.fillStyle = 'rgb(' + bgColor[0] + ',' + bgColor[1] + ',' + bgColor[2] + ')';\n  \t} else {\n  \t\tctx.fillStyle = 'rgb(0,0,0)';\n  \t}\n  \tctx.fillRect(0, 0, c.width, c.height);\n\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.font = \"16px 'Circular Spotify'\";\n\n  \tif(palette.Vibrant) {\n  \t\tconst bgColor = palette.Vibrant.getRgb();\n  \t\tctx.fillStyle = 'rgb(' + bgColor[0] + ',' + bgColor[1] + ',' + bgColor[2] + ')';\n  \t} else {\n  \t\tctx.fillStyle = 'rgb(226,28,164)';\n  \t}\n  \tctx.fillText('QUARANTINE WRAPPED', 270, 50);\n  \tctx.fillRect(30, 43, 230, 3);\n\n  \tconst image = new Image();\n  \timage.crossOrigin = 'Anonymous';\n  \tif(props.tracks) {\n  \t\timage.src = props.artists[0].images[0].url || '';\n  \t}\n\n  \timage.onload = () => {\n  \t\tif(image.naturalWidth < image.naturalHeight) {\n  \t\t\tconst diff = (image.naturalHeight - image.naturalWidth) / 2;\n  \t\t\tctx.drawImage(image, 0, diff, image.naturalWidth, image.naturalWidth, 290, 90, 140, 140);\n  \t\t\tctx.drawImage(image, 0, diff, image.naturalWidth, image.naturalWidth, 280, 105, 160, 160);\n  \t\t\tctx.drawImage(image, 0, diff, image.naturalWidth, image.naturalWidth, 265, 125, 190, 190);\n  \t\t\tctx.drawImage(image, 0, diff, image.naturalWidth, image.naturalWidth, 250, 150, 220, 220);\n  \t\t} else if(image.naturalWidth > image.naturalHeight) {\n  \t\t\tconst diff = (image.naturalWidth - image.naturalHeight) / 2;\n  \t\t\tctx.drawImage(image, diff, 0, image.naturalHeight, image.naturalHeight, 290, 90, 140, 140);\n  \t\t\tctx.drawImage(image, diff, 0, image.naturalHeight, image.naturalHeight, 280, 105, 160, 160);\n  \t\t\tctx.drawImage(image, diff, 0, image.naturalHeight, image.naturalHeight, 265, 125, 190, 190);\n  \t\t\tctx.drawImage(image, diff, 0, image.naturalHeight, image.naturalHeight, 250, 150, 220, 220);\n  \t\t} else {\n  \t\t\tctx.drawImage(image, 290, 90, 140, 140);\n  \t\t\tctx.drawImage(image, 280, 105, 160, 160);\n  \t\t\tctx.drawImage(image, 265, 125, 190, 190);\n  \t\t\tctx.drawImage(image, 250, 150, 220, 220);\n  \t\t}\n  \t};\n\n  \tif(palette.LightVibrant) {\n  \t\tconst bgColor = palette.LightVibrant.getRgb();\n  \t\tctx.fillStyle = 'rgb(' + bgColor[0] + ',' + bgColor[1] + ',' + bgColor[2] + ')';\n  \t} else {\n  \t\tctx.fillStyle = 'rgb(209,255,106)';\n  \t}\n\n  \tctx.font = \"18px 'Circular Spotify'\";\n  \tctx.fillText('TOP ARTISTS', 30, 106);\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.font = \"20px 'Circular Spotify'\";\n\n  \tfor(let i = 0; i < 5; i++) {\n  \t\tif(props.artists[i] && Object.keys(props.artists[i]).length != 0) {\n  \t\t\tlet name = props.artists[i].name;\n  \t\t\tlet metrics = ctx.measureText(name);\n  \t\t\tlet width = metrics.width;\n  \t\t\tif(width > 200) {\n  \t\t\t\tlet ratio = width/name.length;\n  \t\t\t\tlet toRemove = Math.ceil((width-200)/ratio);\n  \t\t\t\tname = shortenString(name, toRemove+1);\n  \t\t\t}\n  \t\t\twriteText(ctx, name, 30, 133 + i * 28);\n  \t\t}\n  \t}\n\n  \tif(palette.LightVibrant) {\n  \t\tconst bgColor = palette.LightVibrant.getRgb();\n  \t\tctx.fillStyle = 'rgb(' + bgColor[0] + ',' + bgColor[1] + ',' + bgColor[2] + ')';\n  \t} else {\n  \t\tctx.fillStyle = 'rgb(209,255,106)';\n  \t}\n\n  \tctx.font = \"18px 'Circular Spotify'\";\n  \twriteText(ctx, 'TOP SONGS', 30, 320);\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.font = \"20px 'Circular Spotify'\";\n\n  \tfor(let i = 0; i < 5; i++) {\n  \t\tif(props.tracks[i]) {\n  \t\t\tlet name = props.tracks[i].name;\n  \t\t\tlet metrics = ctx.measureText(name);\n  \t\t\tlet width = metrics.width;\n  \t\t\tif(width > 200) {\n  \t\t\t\tlet ratio = width/name.length;\n  \t\t\t\tlet toRemove = Math.ceil((width-200)/ratio);\n  \t\t\t\tname = shortenString(name, toRemove+1);\n  \t\t\t}\n  \t\t\twriteText(ctx, name, 30, 348 + i * 28);\n  \t\t}\n  \t}\n\n  \tif(palette.LightVibrant) {\n  \t\tconst bgColor = palette.LightVibrant.getRgb();\n  \t\tctx.fillStyle = 'rgb(' + bgColor[0] + ',' + bgColor[1] + ',' + bgColor[2] + ')';\n  \t} else {\n  \t\tctx.fillStyle = 'rgb(209,255,106)';\n  \t}\n  \tctx.font = \"18px 'Circular Spotify'\";\n  \twriteText(ctx, 'TOP GENRE', 250, 430);\n  \tctx.fillStyle = 'rgb(255,255,255)';\n  \tctx.font = \"24px 'Circular Spotify'\";\n  \tif(props.genres && props.genres[0][0]) {\n  \t\tlet g = props.genres[0][0];\n  \t\tlet topGenre = g.charAt(0).toUpperCase() + g.slice(1);\n  \t\twriteText(ctx, topGenre, 250, 460);\n  \t}\n\n  \tif(palette.DarkVibrant) {\n  \t\tconst bgColor = palette.DarkVibrant.getRgb();\n  \t\tctx.fillStyle = 'rgba(' + bgColor[0] + ',' + bgColor[1] + ',' + bgColor[2] + ', 50)';\n  \t} else {\n  \t\tctx.fillStyle = 'rgb(255,255,255,50)';\n  \t}\n  \tctx.font = \"12px 'Circular Spotify'\";\n  \twriteText(ctx, 'bit.ly/quarantine-wrapped', 305, 66);\n  }\n\n  const writeText = (ctx, words, x, y) => {\n  \tctx.fillText(words, x, y);\n  }\n\n  const drawImage = (ctx, src, x, y, width, height) => {\n  \treturn new Promise((resolve, reject) => {\n\t  \tconst image = new Image();\n\t  \timage.crossOrigin = 'Anonymous';\n\t  \timage.src = src;\n\t  \timage.onload = () => {\n\t  \t\tctx.drawImage(image, x, y, width, height);\n\t  \t\tresolve();\n\t  \t}\n\t\t});\n  }\n\n  const dlCanvas = () => {\n  \tlet canvas = document.getElementById(\"story\");\n  \tlet dt = canvas.toDataURL('image/png');\n  \t/* Change MIME type to trick the browser to downlaod the file instead of displaying it */\n  \tdt = dt.replace(/^data:image\\/[^;]*/, 'data:application/octet-stream');\n\n  \t/* In addition to <a>'s \"download\" attribute, you can define HTTP-style headers */\n  \tdt = dt.replace(/^data:application\\/octet-stream/, 'data:application/octet-stream;headers=Content-Disposition%3A%20attachment%3B%20filename=Canvas.png');\n  \tvar link = document.createElement('a');\n  \tlink.download = 'quarantine-wrapped.png';\n  \tlink.href = dt;\n  \tlink.click();\n  }\n\n  useEffect(() => {\n    if(props.finished >= 3) {\n    \tgetColor();\n    }\n  }, [props.finished]);\n\n  return (\n    <div className='canvas-graphic-wrapper'>\n\t    <div className='canvas-container'>\n\t\t    <div className='canvas-graphic'>\n\t\t    \t<div className='canvas-title'>\n\t\t    \t\t<h1>Share with the world.</h1>\n\t\t    \t\t<h3>Or hide it away forever.</h3>\n\t\t    \t\t<h3>Your choice, really.</h3>\n\t\t    \t\t<button onClick={dlCanvas} className='download-btn'>Download</button>\n\t\t    \t</div>\n\t\t    \t<div className='graphics-wrapper'>\n\t\t      {/*<canvas id='downloadable' width='500' height='500'></canvas>*/}\n\t\t\t      <canvas id='songs' width='450' height='800'></canvas>\n\t\t\t      <canvas id='story' width='450' height='800'></canvas>\n\t\t\t      <canvas id='artists' width='450' height='800'></canvas>\n\t\t      </div>\n\t\t      <div className=\"canvas-credit\">Made with ♥ by <a href=\"https://clawang.github.io/\" id=\"credit-link\">Claire Wang</a>.</div>\n\t      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CanvasGraphic;\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport './App.scss';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport PlaylistPage from './PlaylistPage';\nimport CanvasGraphic from './CanvasGraphic';\nimport Div100vh from 'react-div-100vh';\n\nvar client_id = '2fe65fcbcf884c1c9fafda1d069bb45c'; // Your client id\nvar client_secret = '892e45da9ad74f70b37eddaac40defc7'; // Your secret\n\nfunction App() {\n  const [appState, setAppState] = useState({\n    loggedIn: false,\n    token: ''\n  });\n  const [query, setQuery] = useState('');\n\n  const spotifyApi = new SpotifyWebApi();\n\n  const getHashParams = () => {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  useEffect(() => {\n    const params = getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    setAppState({loggedIn: token ? true : false, token: token});\n  }, [setAppState]);\n\n  const requestToken = () => {\n  }\n\n  const handleChange = (evt) => {\n    setQuery(evt.target.value);\n  }\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    requestToken();\n  }\n\n  const fetchData = () => {\n    const params = {\n      type: ['track'],\n      q: query,\n    };\n    axios.get(`https://api.spotify.com/v1/search`, {params})\n      .then(res => {\n        console.log(res);\n      })\n  }\n\n  return (\n    <div className='App'>\n      <div>\n        <form>\n          <input type=\"text\" value={query} onChange={handleChange} />\n          <input type=\"submit\" onClick={handleSubmit} />\n        </form>\n      </div>\n      <CanvasGraphic />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gradient1.d7a28196.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gradient3.a5e57412.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gradient4.5f015694.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gradient5.e2e75598.png\";"],"sourceRoot":""}